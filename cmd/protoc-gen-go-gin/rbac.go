package main

import (
	"fmt"
	"github/invokerw/gintos/proto/rbac"
	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"html/template"
	"net/http"
	"os"
	"path/filepath"
)

const tpl = `// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// - protoc-gen-go-gin Version: {{.Version}}
package {{.PackageName}}

import (
	"github/invokerw/gintos/proto/rbac"
)

func GetApiInfo() []*rbac.ApiInfo {
	return []*rbac.ApiInfo{
		{{- range .ApiInfo }}
		{
			Method: "{{.Method}}",
			Path: "{{.Path}}",
			Desc: "{{.Desc}}",
			ServiceName: "{{.ServiceName}}",
		},
		{{- end }}
	}
}
`

func rbacGenerate(gen *protogen.Plugin, savePath, packageName string, omitempty bool, omitemptyPrefix string) error {
	if err := os.MkdirAll(savePath, 0755); err != nil {
		return err
	}
	saveFilePath := filepath.Join(savePath, "rbac.go")
	var apiInfoList []*rbac.ApiInfo
	apiMap := make(map[string]*rbac.ApiInfo)
	addApiInfo := func(info *rbac.ApiInfo) {
		apiMapKey := fmt.Sprintf("%s-%s", info.Method, info.Path)
		if oldInfo, ok := apiMap[apiMapKey]; ok {
			fmt.Printf("WARNING !!!! jump duplicate api info: %v, new %v\n", oldInfo, info)
			return
		}
		apiInfoList = append(apiInfoList, info)
		apiMap[apiMapKey] = info
	}
	for _, f := range gen.Files {
		if !f.Generate {
			continue
		}
		for _, service := range f.Services {
			for _, method := range service.Methods {
				if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
					continue
				}
				comment, ok := proto.GetExtension(method.Desc.Options(), rbac.E_Comment).(string)
				if !ok || comment == "" {
					continue
				}
				rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
				if rule != nil && ok {
					for _, bind := range rule.AdditionalBindings {
						path, m := getPathAndMethod(service, method, bind, omitemptyPrefix)
						api := &rbac.ApiInfo{
							Method:      m,
							Path:        path,
							Desc:        comment,
							ServiceName: string(service.Desc.FullName()),
						}
						addApiInfo(api)
					}
					path, m := getPathAndMethod(service, method, rule, omitemptyPrefix)
					api := &rbac.ApiInfo{
						Method:      m,
						Path:        path,
						Desc:        comment,
						ServiceName: string(service.Desc.FullName()),
					}
					addApiInfo(api)
				} else if !omitempty {
					path := fmt.Sprintf("%s/%s/%s", omitemptyPrefix, service.Desc.FullName(), method.Desc.Name())
					api := &rbac.ApiInfo{
						Method:      http.MethodPost,
						Path:        path,
						Desc:        comment,
						ServiceName: string(service.Desc.FullName()),
					}
					addApiInfo(api)
				}
			}
		}
	}

	// 生成文件
	file, err := os.Create(saveFilePath)
	if err != nil {
		return err
	}
	defer file.Close()

	tmpl, err := template.New("rbac").Parse(tpl)
	if err != nil {
		return err
	}

	data := struct {
		PackageName string
		ApiInfo     []*rbac.ApiInfo
		Version     string
	}{
		PackageName: packageName,
		ApiInfo:     apiInfoList,
		Version:     release,
	}

	if err := tmpl.Execute(file, data); err != nil {
		return err
	}

	return nil
}
