syntax = "proto3";

package api.v1.auth;

import "google/api/annotations.proto";
import "openapi/v3/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "v1/common/user.proto";

option go_package = "github/invokerw/gintos/demo/api/v1/auth;auth";


service Auth {
	// 登录
	rpc Login (LoginRequest) returns (LoginResponse) {
		option (google.api.http) = {
			post: "/api/auth/v1/login"
			body: "*"
		};

		option(openapi.v3.operation) = {
			security: {}
		};
	}

	// 登出
	rpc Logout (LogoutRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/api/auth/v1/logout"
			body: "*"
		};
	}

	rpc Register (RegisterRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/api/auth/v1/register"
			body: "*"
		};
	}

	// 刷新认证令牌
	rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
		option (google.api.http) = {
			post: "/api/auth/v1/refresh_token"
			body: "*"
		};
	}

	rpc GetAsyncRoutes (google.protobuf.Empty) returns (GetAsyncRoutesResponse) {
		option (google.api.http) = {
			get: "/api/auth/v1/get_async_routes"
		};
	}

}

message RegisterRequest {
	string username = 1 [
		json_name = "username",
		(google.api.field_behavior) = REQUIRED
	]; // 用户名，必选项。

	string password = 2 [
		json_name = "password",
		(google.api.field_behavior) = REQUIRED
	]; // 用户的密码，必选项。

	string email = 3 [
		json_name = "email",
		(google.api.field_behavior) = REQUIRED
	]; // 用户的邮箱，必选项。
}

// 用户后台登出 - 请求
message LogoutRequest {
	uint32 id = 1;
}

// 用户后台登录 - 请求
message LoginRequest {
	string username = 1 [
		json_name = "username",
		(google.api.field_behavior) = REQUIRED
	]; // 用户名，必选项。

	string password = 2 [
		json_name = "password",
		(google.api.field_behavior) = REQUIRED
	]; // 用户的密码，必选项。
}

// 用户后台登录 - 回应
message LoginResponse {
	common.v1.User user = 1 [
		json_name = "user",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "用户信息"
		}
	]; // 用户信息
	string access_token = 2 [
		json_name = "access_token",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "访问令牌，必选项。"
		}
	]; // 访问令牌

	string refresh_token = 3 [
		json_name = "refresh_token",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "更新令牌，用来获取下一次的访问令牌，"
		}
	]; // 更新令牌，用来获取下一次的访问令牌，可选项。

	int64 expires = 4 [
		json_name = "expires",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "令牌过期时间，单位为毫秒"
		}
	];
	int64 refresh_expires = 5 [
		json_name = "refresh_expires",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "刷新令牌过期时间，单位为毫秒"
		}
	];
}

// 用户刷新令牌 - 请求
message RefreshTokenRequest {
	string refresh_token = 1 [
		json_name = "refresh_token",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "更新令牌，用来获取下一次的访问令牌"
		}
	]; // 更新令牌，用来获取下一次的访问令牌，必选项。
}

// 用户刷新令牌 - 回应
message RefreshTokenResponse {
	common.v1.User user = 1 [
		json_name = "user",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "用户信息"
		}
	]; // 用户信息，必选项。
	string access_token = 2 [
		json_name = "access_token",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "访问令牌，必选项。"
		}
	]; // 访问令牌，必选项。

	string refresh_token = 3 [
		json_name = "refresh_token",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "更新令牌，用来获取下一次的访问令牌，"
		}
	]; // 更新令牌，用来获取下一次的访问令牌，可选项。

	int64 expires = 4 [
		json_name = "expires",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "令牌过期时间，单位为毫秒"
		}
	];
	int64 refresh_expires = 5 [
		json_name = "refresh_expires",
		(google.api.field_behavior) = REQUIRED,
		(openapi.v3.property) = {
			description: "刷新令牌过期时间，单位为毫秒"
		}
	];
}



// 验证密码结果码
enum VerifyPasswordResult {
	SUCCESS = 0;  // 验证成功
	ACCOUNT_NOT_EXISTS = 1; // 账号不存在
	WRONG_PASSWORD = 2;// 密码错误
	FREEZE = 3;// 已冻结
	DELETED = 4;// 已删除
}




message GetAsyncRoutesResponse {
	repeated RouteConfig routes = 1 [
		json_name = "routes",
		(openapi.v3.property) = {
			description: "异步路由列表"
		}
	]; // 异步路由列表
}


// 定义路由元信息
message RouteMeta {
	string title = 1; // 菜单名称
	string icon = 2; // 菜单图标
	int32 rank = 3; // 菜单排序
	bool show_link = 4; // 是否在菜单中显示
	repeated string roles = 5; // 页面级别权限设置
	repeated string auths = 6; // 按钮级别权限设置
}

// 定义路由配置表
message RouteConfig {
	string path = 1; // 路由路径
	string name = 2; // 路由名称（必须保持唯一）
	string redirect = 3; // 重定向路径
	RouteMeta meta = 4; // 路由元信息
	string component = 5; // 按需加载需要展示的页面
	repeated RouteConfig children = 6; // 子路由配置项
}



