// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.0
// - protoc             v3.14.0
// source: v1/auth/auth.proto

package auth

import (
	gin "github.com/gin-gonic/gin"
	resp "github/invokerw/gintos/common/resp"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(gin.Context)
var _ = new(resp.Response)

const OperationAuthGetAsyncRoutes = "/api.auth.v1.Auth/GetAsyncRoutes"
const OperationAuthLogin = "/api.auth.v1.Auth/Login"
const OperationAuthLogout = "/api.auth.v1.Auth/Logout"
const OperationAuthRefreshToken = "/api.auth.v1.Auth/RefreshToken"
const OperationAuthRegister = "/api.auth.v1.Auth/Register"

type IAuthServer interface {
	GetAsyncRoutes(*gin.Context, *emptypb.Empty) (*GetAsyncRoutesResponse, error)
	// Login 登录
	Login(*gin.Context, *LoginRequest) (*LoginResponse, error)
	// Logout 登出
	Logout(*gin.Context, *LogoutRequest) (*emptypb.Empty, error)
	// RefreshToken 刷新认证令牌
	RefreshToken(*gin.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	Register(*gin.Context, *RegisterRequest) (*emptypb.Empty, error)
}

func RegisterAuthServer(r gin.IRoutes, srv IAuthServer) {
	r.POST("/api/auth/v1/login", _Auth_Login0_HTTP_Handler(srv))
	r.POST("/api/auth/v1/logout", _Auth_Logout0_HTTP_Handler(srv))
	r.POST("/api/auth/v1/register", _Auth_Register0_HTTP_Handler(srv))
	r.POST("/api/auth/v1/refresh_token", _Auth_RefreshToken0_HTTP_Handler(srv))
	r.GET("/api/auth/v1/get_async_routes", _Auth_GetAsyncRoutes0_HTTP_Handler(srv))
}

func _Auth_Login0_HTTP_Handler(srv IAuthServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in LoginRequest
		if err := ctx.ShouldBindJSON(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		// http.SetOperation(ctx, OperationAuthLogin)
		reply, err := srv.Login(ctx, &in)
		if err != nil {
			resp.FailWithError(ctx, err)
			return
		}
		resp.OkWithData(ctx, reply)
	}
}

func _Auth_Logout0_HTTP_Handler(srv IAuthServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in LogoutRequest
		if err := ctx.ShouldBindJSON(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		// http.SetOperation(ctx, OperationAuthLogout)
		reply, err := srv.Logout(ctx, &in)
		if err != nil {
			resp.FailWithError(ctx, err)
			return
		}
		resp.OkWithData(ctx, reply)
	}
}

func _Auth_Register0_HTTP_Handler(srv IAuthServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in RegisterRequest
		if err := ctx.ShouldBindJSON(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		// http.SetOperation(ctx, OperationAuthRegister)
		reply, err := srv.Register(ctx, &in)
		if err != nil {
			resp.FailWithError(ctx, err)
			return
		}
		resp.OkWithData(ctx, reply)
	}
}

func _Auth_RefreshToken0_HTTP_Handler(srv IAuthServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in RefreshTokenRequest
		if err := ctx.ShouldBindJSON(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		// http.SetOperation(ctx, OperationAuthRefreshToken)
		reply, err := srv.RefreshToken(ctx, &in)
		if err != nil {
			resp.FailWithError(ctx, err)
			return
		}
		resp.OkWithData(ctx, reply)
	}
}

func _Auth_GetAsyncRoutes0_HTTP_Handler(srv IAuthServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			resp.FailWithMessage(ctx, err.Error())
			return
		}
		// http.SetOperation(ctx, OperationAuthGetAsyncRoutes)
		reply, err := srv.GetAsyncRoutes(ctx, &in)
		if err != nil {
			resp.FailWithError(ctx, err)
			return
		}
		resp.OkWithData(ctx, reply)
	}
}
