syntax = "proto3";

package api.v1.admin;

import "google/api/annotations.proto";
import "openapi/v3/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "v1/common/user.proto";
import "v1/common/common.proto";
import "rbac/annotations.proto";

option go_package = "github/invokerw/gintos/demo/api/v1/admin;admin";


service Admin {

	rpc GetUserList (GetUserListRequest) returns (GetUserListResponse) {
		option (google.api.http) = {
			post: "/api/v1/admin/get_user_list"
			body: "*"
		};
		option (rbac.comment) = "获取用户列表";
		option (rbac.type) = "user";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc UpdateUsers (UpdateUsersRequest) returns (UpdateUsersResponse) {
		option (google.api.http) = {
			post: "/api/v1/admin/update_users"
			body: "*"
		};
		option (rbac.comment) = "更新用户";
		option (rbac.type) = "user";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc DeleteUsers (DeleteUsersRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/api/v1/admin/delete_users"
			body: "*"
		};
		option (rbac.comment) = "删除用户";
		option (rbac.type) = "user";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc GetUserCount (google.protobuf.Empty) returns (common.v1.IntValue) {
		option (google.api.http) = {
			get: "/api/v1/admin/get_user_count"
		};
		option (rbac.comment) = "获取用户数量";
		option (rbac.type) = "user";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc GetRoleList (GetRoleListRequest) returns (GetRoleListResponse) {
		option (google.api.http) = {
			post: "/api/v1/admin/get_role_list"
			body: "*"
		};
		option (rbac.comment) = "获取角色列表";
		option (rbac.type) = "role";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc UpdateRoles (UpdateRolesRequest) returns (UpdateRolesResponse) {
		option (google.api.http) = {
			post: "/api/v1/admin/update_roles"
			body: "*"
		};
		option (rbac.comment) = "更新角色";
		option (rbac.type) = "role";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc DeleteRoles (DeleteRolesRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/api/v1/admin/delete_roles"
			body: "*"
		};
		option (rbac.comment) = "删除角色";
		option (rbac.type) = "role";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc GetRoleCount (google.protobuf.Empty) returns (common.v1.IntValue) {
		option (google.api.http) = {
			get: "/api/v1/admin/get_role_count"
		};
		option (rbac.comment) = "获取角色数量";
		option (rbac.type) = "role";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc GetApiInfoList (google.protobuf.Empty) returns (GetApiInfoListResponse) {
		option (google.api.http) = {
			get: "/api/v1/admin/get_api_info"
		};
		option (rbac.comment) = "获取API信息列表";
		option (rbac.type) = "rbac";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc RoleGetPolicy (RoleGetPolicyRequest) returns (RoleGetPolicyResponse) {
		option (google.api.http) = {
			get: "/api/v1/admin/role_get_policy/:role_name"
		};
		option (rbac.comment) = "获取角色权限";
		option (rbac.type) = "rbac";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

	rpc RoleUpdatePolicy (RoleUpdatePolicyRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/api/v1/admin/role_add_policy"
			body: "*"
		};
		option (rbac.comment) = "角色更新权限";
		option (rbac.type) = "rbac";
		option(openapi.v3.operation) = {
			security: {}
		};
	}

}

message GetUserListRequest {
	common.v1.PageInfo page = 1 [
		json_name = "page",
		(openapi.v3.property) = {description: "分页信息"}
	]; // 分页信息
	optional string username = 2 [
		json_name = "username",
		(openapi.v3.property) = {description: "登录名"}
	]; // 登录名
	optional string nickname = 3 [
		json_name = "nickname",
		(openapi.v3.property) = {description: "昵称"}
	]; // 昵称
}

message GetUserListResponse {
	repeated common.v1.User users = 1;
}

message UpdateUsersRequest {
	repeated common.v1.User users = 1 [
		json_name = "users",
		(openapi.v3.property) = {description: "用户信息"}
	]; // 用户信息
}

message UpdateUsersResponse {
	repeated common.v1.User users = 1;
}

message DeleteUsersRequest {
	repeated string names = 1 [
		json_name = "names",
		(openapi.v3.property) = {description: "用户名"}
	]; // 用户ID
}


message GetRoleListRequest {
	common.v1.PageInfo page = 1 [
		json_name = "page",
		(openapi.v3.property) = {description: "分页信息"}
	]; // 分页信息
	optional string name = 2 [
		json_name = "name",
		(openapi.v3.property) = {description: "角色名"}
	]; // 登录名
}

message GetRoleListResponse {
	repeated common.v1.Role roles = 1;
}

message UpdateRolesRequest {
	repeated common.v1.Role roles = 1 [
		json_name = "roles",
		(openapi.v3.property) = {description: "角色信息"}
	]; // 角色信息
}

message UpdateRolesResponse {
	repeated common.v1.Role roles = 1;
}

message DeleteRolesRequest {
	repeated string names = 1 [
		json_name = "names",
		(openapi.v3.property) = {description: "角色名字"}
	];
}

message GetApiInfoListResponse {
	map<string, common.v1.ApiTypeInfo> api_type_map = 2 [
		json_name = "apiTypeMap",
		(openapi.v3.property) = {description: "分类API数据"}
	]; // API信息
}

message RoleGetPolicyRequest {
	string role_name = 1 [
		json_name = "roleName",
		(openapi.v3.property) = {description: "角色名字"}
	]; // 角色名字
}

message RoleGetPolicyResponse {
	string role_name = 1 [
		json_name = "roleName",
		(openapi.v3.property) = {description: "角色名字"}
	]; // 角色名字
	repeated common.v1.ApiInfo api_info = 2 [
		json_name = "apiInfo",
		(openapi.v3.property) = {description: "API信息"}
	]; // API信息
}

message RoleUpdatePolicyRequest {
	string role_name = 1 [
		json_name = "roleName",
		(openapi.v3.property) = {description: "角色名字"}
	]; // 角色名字
	repeated string api_name = 2 [
		json_name = "apiName",
		(openapi.v3.property) = {description: "api 名称"}
	]; // 权限名字
}
