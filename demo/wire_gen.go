// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github/invokerw/gintos/demo/internal/biz"
	"github/invokerw/gintos/demo/internal/conf"
	"github/invokerw/gintos/demo/internal/data"
	"github/invokerw/gintos/demo/internal/initialize"
	"github/invokerw/gintos/demo/internal/router"
	"github/invokerw/gintos/demo/internal/service"
	"github/invokerw/gintos/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(server *conf.Server, confData *conf.Data, logger log.Logger) (*App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	initRet := initialize.DoInit(userRepo, logger)
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	authService := service.NewAuthService(userUsecase, logger)
	adminService := service.NewAdminService(userUsecase, logger)
	baseService := service.NewBaseService(userUsecase, logger)
	adapter, err := data.NewCasbinAdapter(dataData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	enforcer, err := biz.NewCasbinEnforcer(adapter)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engine := router.NewGinHttpServer(server, greeterService, authService, adminService, baseService, enforcer, logger)
	app := newApp(initRet, engine)
	return app, func() {
		cleanup()
	}, nil
}
